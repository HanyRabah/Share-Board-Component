/* EmailsInput version 1.0.0 */
(function (global, factory) {
  typeof exports === "object" && typeof module !== "undefined"
    ? (module.exports = factory())
    : typeof define === "function" && define.amd
    ? define(factory)
    : ((global = global || self), (global.EmailsInput = factory()));
})(this, function () {
  "use strict";

  function __$styleInject(css) {
    if (!css) return;

    if (typeof window == "undefined") return;
    var style = document.createElement("style");
    style.setAttribute("media", "screen");

    style.innerHTML = css;
    document.head.appendChild(style);
    return css;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  __$styleInject(
    "@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-display: swap;\n  src: local('Open Sans Regular'), local('OpenSans-Regular'), url(https://fonts.gstatic.com/s/opensans/v17/mem8YaGs126MiZpBA-U1Ug.ttf) format('truetype');\n}\n.tag-wrapper {\n  font-family: 'Open Sans', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  background-color: white;\n  border: 1px solid #C3C2CF;\n  box-sizing: border-box;\n  border-radius: 4px;\n  width: 100%;\n  height: 80px;\n  padding: 8px;\n  overflow-y: scroll;\n}\n.tag-input {\n  background: transparent;\n  border: 0;\n  font-size: 14px;\n  line-height: 24px;\n  width: auto;\n  padding: 0  0 0 8px;\n}\n.tag-input:focus {\n  outline: none;\n}\n.tag-item {\n  background: rgba(102, 153, 255, 0.2);\n  border-radius: 50px;\n  padding: 0 0 0 8px;\n  margin: 0 4px 4px 0;\n  display: inline-flex;\n}\n.tag-item__invalid {\n  background-color: transparent;\n  animation: none;\n}\n.tag-item__label {\n  font-size: 14px;\n  line-height: 24px;\n  max-width: 150px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  display: inline-block;\n}\n.tag-item__invalid .tag-item__label {\n  border-bottom: 1px dashed #e65959;\n}\n.tag-item__close-button {\n  background: transparent;\n  border: 0;\n  padding-right: 8px;\n  font-size: 10px;\n  line-height: 23px;\n  cursor: pointer;\n}\n.tag-item__close-button:focus {\n  outline: none;\n}\n"
  );

  /**
   * @const EMAIL_REG
   */

  var EMAIL_REG = /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
  /**
   * @const ENTER_KEY
   */

  var ENTER_KEY = "Enter";
  /**
   * Validates email address.
   *
   * @param {String} value
   * @returns {Boolean}
   */

  function isValid(value) {
    return EMAIL_REG.test(value.toLowerCase());
  }
  /**
   * Creates dom element.
   *
   * @param {String} tag
   * @param {Object} attributes
   * @returns {HTMLElement}
   */

  function createElement(tag, attributes) {
    var element = document.createElement(tag);

    for (var key in attributes) {
      if (key === "text") {
        element.appendChild(document.createTextNode(attributes[key]));
      } else {
        element[key] = attributes[key];
      }
    }

    return element;
  }
  /**
   * Create tag element with label and close button.
   *
   * @param {String} value
   * @returns {HTMLElement}
   */

  function _createTagElement(value) {
    var el = createElement("span", {
      className: "tag-item",
    });

    if (!isValid(value.trim())) {
      el.classList.add("tag-item__invalid");
    }

    var label = createElement("span", {
      className: "tag-item__label",
      text: value,
    });
    var closeButtonEl = createElement("button", {
      type: "button",
      title: "Remove",
      className: "tag-item__close-button",
    });
    closeButtonEl.appendChild(document.createTextNode("âœ•"));
    el.appendChild(label);
    el.appendChild(closeButtonEl);
    return el;
  }
  /**
   * @class TagInput creates tagged input element with some awesome features.
   * @param {HTMLElement} element
   * @param {Object} options
   */

  var TagInput = /*#__PURE__*/ (function () {
    function TagInput(element) {
      var _this = this;

      var options =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : {
              placeholder: "add more people...",
            };

      _classCallCheck(this, TagInput);

      _defineProperty(this, "handleTagInputClick", function (event) {
        _this.inputElement.focus();

        _this.removeTag(event);
      });

      _defineProperty(this, "handleInputKeypress", function (_ref) {
        var currentTarget = _ref.currentTarget;

        // check if keypress not Enter then return
        if (event.key !== ENTER_KEY) {
          return null;
        } // if enter key pressed then check if input is valid if not clear the field

        if (!_this.validate(currentTarget.value)) {
          _this.inputElement.value = ""; // TODO: tell the user what happend by adding it to the UI

          throw "item already exist or length less than 3 characters";
        }

        _this.createTagElement(_this.inputElement.value);
      });

      _defineProperty(this, "handleInputBlur", function (_ref2) {
        var currentTarget = _ref2.currentTarget;

        if (!_this.validate(currentTarget.value)) {
          return null;
        }

        _this.createTagElement(_this.inputElement.value);
      });

      _defineProperty(this, "handleInputInput", function () {
        var value = _this.inputElement.value.split(",");

        if (value.length > 1) {
          value
            .filter(function (item) {
              return item != "";
            })
            .forEach(function (tag) {
              _this.validate(tag);

              _this.createTagElement(tag);
            });
        }
      });

      if (typeof window === "undefined") {
        throw new TypeError("This plugin is only works in browser");
      }

      this.element = element;
      this.options = options;
      this.data = this.options.data || [];

      if (!(element instanceof HTMLElement)) {
        throw new TypeError("HTMLElement expected, ".concat(element, " given"));
      }

      this.inputElement = createElement("input", {
        className: "tag-input",
        placeholder: options.placeholder,
      });
      this.element.className = "tag-wrapper";
      this.element.append(this.inputElement);
      this.addEventListeners();

      if (this.data.length > 0) {
        this.data.forEach(function (element) {
          _this.createTagElement(element);
        });
      }
    }

    _createClass(TagInput, [
      {
        key: "addEventListeners",
        value: function addEventListeners() {
          this.element.addEventListener("click", this.handleTagInputClick);
          this.inputElement.addEventListener(
            "keypress",
            this.handleInputKeypress
          );
          this.inputElement.addEventListener("input", this.handleInputInput);
          this.inputElement.addEventListener("blur", this.handleInputBlur);
        },
      },
      {
        key: "removeTag",
        value: function removeTag(_ref3) {
          var target = _ref3.target;

          if (!target.matches("button[type=button]")) {
            return null;
          }

          var tag = target.closest(".tag-item");
          this.data = this.data.filter(function (i) {
            return i !== tag.firstChild.textContent;
          });
          tag.remove();
        },
      },
      {
        key: "createTagElement",
        value: function createTagElement(value) {
          var tagEl = _createTagElement(value);

          this.data.push(value);
          this.element.insertBefore(tagEl, this.inputElement);
          this.inputElement.value = "";
          this.inputElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        },
      },
      {
        key: "validate",
        value: function validate(value) {
          var hasValidLength = value.length >= 3;
          var isExists = this.data.some(function (i) {
            return i === value;
          });
          return hasValidLength && !isExists;
        },
      },
      {
        key: "emailCount",
        get: function get() {
          return this.data.length;
        },
      },
    ]);

    return TagInput;
  })();

  return TagInput;
});
